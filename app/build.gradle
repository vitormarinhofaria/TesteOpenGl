plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'
cargo {
    module = "C:/dev/src/rust/andr_lib"       // Or whatever directory contains your Cargo.toml
    libname = "andr_lib"          // Or whatever matches Cargo.toml's [package] name.
    targets = ["arm64", "x86_64", "arm", "x86"]  // See bellow for a longer list of options
}

android {
    compileSdk 33
    ndkVersion "25.1.8937393"

    defaultConfig {
        applicationId "com.example.testeopengl"
        minSdk 29
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                //arguments '-DCMAKE_TOOLCHAIN_FILE=~/dev_tools/vcpkg/scripts/buildsystems/vcpkg.cmake', '-DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=~/Android/Sdk/ndk/25.1.8937393/build/cmake/android.toolchain.cmake'
                cppFlags ''
                arguments '-DANDROID_STL=c++_shared'
            }
        }
        signingConfig signingConfigs.debug
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        prefab true
    }
    sourceSets {
        main {
            // let gradle pack the shared library into apk
            jniLibs.srcDirs = ['src/main/cpp/libs/']
        }
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }
    namespace 'com.example.testeopengl'
    packagingOptions.jniLibs.keepDebugSymbols += '**/*.so'
}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'com.arthenica:ffmpeg-kit-full:4.5.1-1.LTS'

    implementation 'com.google.oboe:oboe:1.6.1'
}

task copyRustLibs(type: Copy) {
    from('build/rustJniLibs/android/'){
        include "**/*.so"
    }
    into 'src/main/cpp/libs/'
    duplicatesStrategy 'include'
}

tasks.whenTaskAdded { Task task ->
    if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
        task.dependsOn 'cargoBuild', 'copyRustLibs'
    }
}

tasks.forEach {
//    if(it.name.contains("cargo")){
//    }
}
//var cargoTask = tasks.findByName('cargoBuild')
//cargoTask.doLast {
//}